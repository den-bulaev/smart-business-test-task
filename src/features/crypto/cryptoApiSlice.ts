// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import type { IPairData } from "./interfaces";

export const cryptoApiSlice = createApi({
  baseQuery: fetchBaseQuery({
    baseUrl: 'https://api.binance.com',
  }),
  reducerPath: "cryptoApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Crypto"],
  endpoints: build => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getCrypto: build.query<IPairData[], string>({
      query: (pairs) => `/api/v3/ticker/24hr?type=MINI&symbols=${pairs}`,
      transformResponse: (response: IPairData[], meta, arg) => response,
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error, id) => [{ type: "Crypto", id }],
    }),
  }),
});

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useGetCryptoQuery } = cryptoApiSlice;
